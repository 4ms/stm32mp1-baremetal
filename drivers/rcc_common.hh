#pragma once
#include "drivers/register_access.hh"
#include "drivers/stm32xx.h"
#include <variant>

namespace mdrivlib
{

namespace RCC_Reset_Set
{
// Auto-generated:
// clang-format off
using ADC12_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB2RSTSETR), RCC_AHB2RSTSETR_ADC12RST>;
using CEC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_CECRST>;
using CRC1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB6RSTSETR), RCC_AHB6RSTSETR_CRC1RST>;
using CRC2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB3RSTSETR), RCC_AHB3RSTSETR_CRC2RST>;
using CRYP1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB5RSTSETR), RCC_AHB5RSTSETR_CRYP1RST>;
using CRYP2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB3RSTSETR), RCC_AHB3RSTSETR_CRYP2RST>;
using DAC12_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_DAC12RST>;
using DCMI_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB3RSTSETR), RCC_AHB3RSTSETR_DCMIRST>;
using DDRPERFM_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB4RSTSETR), RCC_APB4RSTSETR_DDRPERFMRST>;
using DFSDM_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTSETR), RCC_APB2RSTSETR_DFSDMRST>;
using DMA1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB2RSTSETR), RCC_AHB2RSTSETR_DMA1RST>;
using DMA2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB2RSTSETR), RCC_AHB2RSTSETR_DMA2RST>;
using DMAMUX_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB2RSTSETR), RCC_AHB2RSTSETR_DMAMUXRST>;
using DSI_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB4RSTSETR), RCC_APB4RSTSETR_DSIRST>;
using DTS_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB3RSTSETR), RCC_APB3RSTSETR_DTSRST>;
using ETHMAC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB6RSTSETR), RCC_AHB6RSTSETR_ETHMACRST>;
using FDCAN_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTSETR), RCC_APB2RSTSETR_FDCANRST>;
using FMC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB6RSTSETR), RCC_AHB6RSTSETR_FMCRST>;
using GPIOA_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTSETR), RCC_AHB4RSTSETR_GPIOARST>;
using GPIOB_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTSETR), RCC_AHB4RSTSETR_GPIOBRST>;
using GPIOC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTSETR), RCC_AHB4RSTSETR_GPIOCRST>;
using GPIOD_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTSETR), RCC_AHB4RSTSETR_GPIODRST>;
using GPIOE_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTSETR), RCC_AHB4RSTSETR_GPIOERST>;
using GPIOF_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTSETR), RCC_AHB4RSTSETR_GPIOFRST>;
using GPIOG_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTSETR), RCC_AHB4RSTSETR_GPIOGRST>;
using GPIOH_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTSETR), RCC_AHB4RSTSETR_GPIOHRST>;
using GPIOI_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTSETR), RCC_AHB4RSTSETR_GPIOIRST>;
using GPIOJ_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTSETR), RCC_AHB4RSTSETR_GPIOJRST>;
using GPIOK_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTSETR), RCC_AHB4RSTSETR_GPIOKRST>;
using GPIOZ_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB5RSTSETR), RCC_AHB5RSTSETR_GPIOZRST>;
using GPU_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB6RSTSETR), RCC_AHB6RSTSETR_GPURST>;
using HASH1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB5RSTSETR), RCC_AHB5RSTSETR_HASH1RST>;
using HASH2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB3RSTSETR), RCC_AHB3RSTSETR_HASH2RST>;
using HSEM_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB3RSTSETR), RCC_AHB3RSTSETR_HSEMRST>;
using I2C1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_I2C1RST>;
using I2C2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_I2C2RST>;
using I2C3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_I2C3RST>;
using I2C4_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB5RSTSETR), RCC_APB5RSTSETR_I2C4RST>;
using I2C5_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_I2C5RST>;
using I2C6_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB5RSTSETR), RCC_APB5RSTSETR_I2C6RST>;
using IPCC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB3RSTSETR), RCC_AHB3RSTSETR_IPCCRST>;
using LPTIM1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_LPTIM1RST>;
using LPTIM2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB3RSTSETR), RCC_APB3RSTSETR_LPTIM2RST>;
using LPTIM3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB3RSTSETR), RCC_APB3RSTSETR_LPTIM3RST>;
using LPTIM4_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB3RSTSETR), RCC_APB3RSTSETR_LPTIM4RST>;
using LPTIM5_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB3RSTSETR), RCC_APB3RSTSETR_LPTIM5RST>;
using LTDC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB4RSTSETR), RCC_APB4RSTSETR_LTDCRST>;
using MDIOS_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_MDIOSRST>;
using MDMA_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, TZAHB6RSTSETR), RCC_TZAHB6RSTSETR_MDMARST>;
using QSPI_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB6RSTSETR), RCC_AHB6RSTSETR_QSPIRST>;
using RNG1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB5RSTSETR), RCC_AHB5RSTSETR_RNG1RST>;
using RNG2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB3RSTSETR), RCC_AHB3RSTSETR_RNG2RST>;
using SAI1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTSETR), RCC_APB2RSTSETR_SAI1RST>;
using SAI2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTSETR), RCC_APB2RSTSETR_SAI2RST>;
using SAI3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTSETR), RCC_APB2RSTSETR_SAI3RST>;
using SAI4_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB3RSTSETR), RCC_APB3RSTSETR_SAI4RST>;
using SDMMC1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB6RSTSETR), RCC_AHB6RSTSETR_SDMMC1RST>;
using SDMMC2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB6RSTSETR), RCC_AHB6RSTSETR_SDMMC2RST>;
using SDMMC3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB2RSTSETR), RCC_AHB2RSTSETR_SDMMC3RST>;
using SPDIF_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_SPDIFRST>;
using SPI1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTSETR), RCC_APB2RSTSETR_SPI1RST>;
using SPI2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_SPI2RST>;
using SPI3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_SPI3RST>;
using SPI4_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTSETR), RCC_APB2RSTSETR_SPI4RST>;
using SPI5_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTSETR), RCC_APB2RSTSETR_SPI5RST>;
using SPI6_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB5RSTSETR), RCC_APB5RSTSETR_SPI6RST>;
using STGEN_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB5RSTSETR), RCC_APB5RSTSETR_STGENRST>;
using SYSCFG_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB3RSTSETR), RCC_APB3RSTSETR_SYSCFGRST>;
using TIM1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTSETR), RCC_APB2RSTSETR_TIM1RST>;
using TIM2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_TIM2RST>;
using TIM3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_TIM3RST>;
using TIM4_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_TIM4RST>;
using TIM5_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_TIM5RST>;
using TIM6_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_TIM6RST>;
using TIM7_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_TIM7RST>;
using TIM8_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTSETR), RCC_APB2RSTSETR_TIM8RST>;
using TIM12_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_TIM12RST>;
using TIM13_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_TIM13RST>;
using TIM14_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_TIM14RST>;
using TIM15_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTSETR), RCC_APB2RSTSETR_TIM15RST>;
using TIM16_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTSETR), RCC_APB2RSTSETR_TIM16RST>;
using TIM17_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTSETR), RCC_APB2RSTSETR_TIM17RST>;
using UART4_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_UART4RST>;
using UART5_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_UART5RST>;
using UART7_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_UART7RST>;
using UART8_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_UART8RST>;
using USART1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB5RSTSETR), RCC_APB5RSTSETR_USART1RST>;
using USART2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_USART2RST>;
using USART3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTSETR), RCC_APB1RSTSETR_USART3RST>;
using USART6_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTSETR), RCC_APB2RSTSETR_USART6RST>;
using USBH_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB6RSTSETR), RCC_AHB6RSTSETR_USBHRST>;
using USBO_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB2RSTSETR), RCC_AHB2RSTSETR_USBORST>;
using USBPHY_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB4RSTSETR), RCC_APB4RSTSETR_USBPHYRST>;
using VREF_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB3RSTSETR), RCC_APB3RSTSETR_VREFRST>;
// clang-format on
} // namespace RCC_Reset_Set

namespace RCC_Reset_Release
{
// AKA: Reset clear.
// Auto-generated:
// clang-format off
using ADC12_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB2RSTCLRR), RCC_AHB2RSTCLRR_ADC12RST>;
using CEC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_CECRST>;
using CRC1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB6RSTCLRR), RCC_AHB6RSTCLRR_CRC1RST>;
using CRC2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB3RSTCLRR), RCC_AHB3RSTCLRR_CRC2RST>;
using CRYP1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB5RSTCLRR), RCC_AHB5RSTCLRR_CRYP1RST>;
using CRYP2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB3RSTCLRR), RCC_AHB3RSTCLRR_CRYP2RST>;
using DAC12_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_DAC12RST>;
using DCMI_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB3RSTCLRR), RCC_AHB3RSTCLRR_DCMIRST>;
using DDRPERFM_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB4RSTCLRR), RCC_APB4RSTCLRR_DDRPERFMRST>;
using DFSDM_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTCLRR), RCC_APB2RSTCLRR_DFSDMRST>;
using DMA1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB2RSTCLRR), RCC_AHB2RSTCLRR_DMA1RST>;
using DMA2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB2RSTCLRR), RCC_AHB2RSTCLRR_DMA2RST>;
using DMAMUX_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB2RSTCLRR), RCC_AHB2RSTCLRR_DMAMUXRST>;
using DSI_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB4RSTCLRR), RCC_APB4RSTCLRR_DSIRST>;
using DTS_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB3RSTCLRR), RCC_APB3RSTCLRR_DTSRST>;
using ETHMAC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB6RSTCLRR), RCC_AHB6RSTCLRR_ETHMACRST>;
using FMC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB6RSTCLRR), RCC_AHB6RSTCLRR_FMCRST>;
using GPIOA_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTCLRR), RCC_AHB4RSTCLRR_GPIOARST>;
using GPIOB_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTCLRR), RCC_AHB4RSTCLRR_GPIOBRST>;
using GPIOC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTCLRR), RCC_AHB4RSTCLRR_GPIOCRST>;
using GPIOD_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTCLRR), RCC_AHB4RSTCLRR_GPIODRST>;
using GPIOE_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTCLRR), RCC_AHB4RSTCLRR_GPIOERST>;
using GPIOF_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTCLRR), RCC_AHB4RSTCLRR_GPIOFRST>;
using GPIOG_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTCLRR), RCC_AHB4RSTCLRR_GPIOGRST>;
using GPIOH_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTCLRR), RCC_AHB4RSTCLRR_GPIOHRST>;
using GPIOI_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTCLRR), RCC_AHB4RSTCLRR_GPIOIRST>;
using GPIOJ_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTCLRR), RCC_AHB4RSTCLRR_GPIOJRST>;
using GPIOK_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB4RSTCLRR), RCC_AHB4RSTCLRR_GPIOKRST>;
using GPIOZ_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB5RSTCLRR), RCC_AHB5RSTCLRR_GPIOZRST>;
using HASH1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB5RSTCLRR), RCC_AHB5RSTCLRR_HASH1RST>;
using HASH2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB3RSTCLRR), RCC_AHB3RSTCLRR_HASH2RST>;
using HSEM_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB3RSTCLRR), RCC_AHB3RSTCLRR_HSEMRST>;
using I2C1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_I2C1RST>;
using I2C2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_I2C2RST>;
using I2C3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_I2C3RST>;
using I2C4_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB5RSTCLRR), RCC_APB5RSTCLRR_I2C4RST>;
using I2C5_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_I2C5RST>;
using I2C6_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB5RSTCLRR), RCC_APB5RSTCLRR_I2C6RST>;
using IPCC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB3RSTCLRR), RCC_AHB3RSTCLRR_IPCCRST>;
using LPTIM1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_LPTIM1RST>;
using LPTIM2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB3RSTCLRR), RCC_APB3RSTCLRR_LPTIM2RST>;
using LPTIM3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB3RSTCLRR), RCC_APB3RSTCLRR_LPTIM3RST>;
using LPTIM4_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB3RSTCLRR), RCC_APB3RSTCLRR_LPTIM4RST>;
using LPTIM5_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB3RSTCLRR), RCC_APB3RSTCLRR_LPTIM5RST>;
using LTDC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB4RSTCLRR), RCC_APB4RSTCLRR_LTDCRST>;
using MDIOS_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_MDIOSRST>;
using MDMA_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, TZAHB6RSTCLRR), RCC_TZAHB6RSTCLRR_MDMARST>;
using QSPI_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB6RSTCLRR), RCC_AHB6RSTCLRR_QSPIRST>;
using RNG1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB5RSTCLRR), RCC_AHB5RSTCLRR_RNG1RST>;
using RNG2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB3RSTCLRR), RCC_AHB3RSTCLRR_RNG2RST>;
using SAI1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTCLRR), RCC_APB2RSTCLRR_SAI1RST>;
using SAI2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTCLRR), RCC_APB2RSTCLRR_SAI2RST>;
using SAI3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTCLRR), RCC_APB2RSTCLRR_SAI3RST>;
using SAI4_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB3RSTCLRR), RCC_APB3RSTCLRR_SAI4RST>;
using SDMMC1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB6RSTCLRR), RCC_AHB6RSTCLRR_SDMMC1RST>;
using SDMMC2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB6RSTCLRR), RCC_AHB6RSTCLRR_SDMMC2RST>;
using SDMMC3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB2RSTCLRR), RCC_AHB2RSTCLRR_SDMMC3RST>;
using SPDIF_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_SPDIFRST>;
using SPI1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTCLRR), RCC_APB2RSTCLRR_SPI1RST>;
using SPI2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_SPI2RST>;
using SPI3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_SPI3RST>;
using SPI4_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTCLRR), RCC_APB2RSTCLRR_SPI4RST>;
using SPI5_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTCLRR), RCC_APB2RSTCLRR_SPI5RST>;
using SPI6_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB5RSTCLRR), RCC_APB5RSTCLRR_SPI6RST>;
using STGEN_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB5RSTCLRR), RCC_APB5RSTCLRR_STGENRST>;
using SYSCFG_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB3RSTCLRR), RCC_APB3RSTCLRR_SYSCFGRST>;
using TIM1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTCLRR), RCC_APB2RSTCLRR_TIM1RST>;
using TIM2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_TIM2RST>;
using TIM3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_TIM3RST>;
using TIM4_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_TIM4RST>;
using TIM5_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_TIM5RST>;
using TIM6_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_TIM6RST>;
using TIM7_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_TIM7RST>;
using TIM8_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTCLRR), RCC_APB2RSTCLRR_TIM8RST>;
using TIM12_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_TIM12RST>;
using TIM13_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_TIM13RST>;
using TIM14_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_TIM14RST>;
using TIM15_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTCLRR), RCC_APB2RSTCLRR_TIM15RST>;
using TIM16_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTCLRR), RCC_APB2RSTCLRR_TIM16RST>;
using TIM17_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTCLRR), RCC_APB2RSTCLRR_TIM17RST>;
using UART4_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_UART4RST>;
using UART5_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_UART5RST>;
using UART7_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_UART7RST>;
using UART8_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_UART8RST>;
using USART1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB5RSTCLRR), RCC_APB5RSTCLRR_USART1RST>;
using USART2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_USART2RST>;
using USART3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB1RSTCLRR), RCC_APB1RSTCLRR_USART3RST>;
using USART6_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB2RSTCLRR), RCC_APB2RSTCLRR_USART6RST>;
using USBH_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB6RSTCLRR), RCC_AHB6RSTCLRR_USBHRST>;
using USBO_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, AHB2RSTCLRR), RCC_AHB2RSTCLRR_USBORST>;
using USBPHY_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB4RSTCLRR), RCC_APB4RSTCLRR_USBPHYRST>;
using VREF_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, APB3RSTCLRR), RCC_APB3RSTCLRR_VREFRST>;
// clang-format on
} // namespace RCC_Reset_Release

namespace RCC_Reset
{
namespace Set = RCC_Reset_Set;
namespace Clr = RCC_Reset_Release;
// Auto-generated
// clang-format off
using ADC12_ = RegisterDualSetClear<Set::ADC12_::BaseAddress, Set::ADC12_::Mask, Clr::ADC12_::BaseAddress, Clr::ADC12_::Mask>;
using CEC_ = RegisterDualSetClear<Set::CEC_::BaseAddress, Set::CEC_::Mask, Clr::CEC_::BaseAddress, Clr::CEC_::Mask>;
using CRC1_ = RegisterDualSetClear<Set::CRC1_::BaseAddress, Set::CRC1_::Mask, Clr::CRC1_::BaseAddress, Clr::CRC1_::Mask>;
using CRC2_ = RegisterDualSetClear<Set::CRC2_::BaseAddress, Set::CRC2_::Mask, Clr::CRC2_::BaseAddress, Clr::CRC2_::Mask>;
using CRYP1_ = RegisterDualSetClear<Set::CRYP1_::BaseAddress, Set::CRYP1_::Mask, Clr::CRYP1_::BaseAddress, Clr::CRYP1_::Mask>;
using CRYP2_ = RegisterDualSetClear<Set::CRYP2_::BaseAddress, Set::CRYP2_::Mask, Clr::CRYP2_::BaseAddress, Clr::CRYP2_::Mask>;
using DAC12_ = RegisterDualSetClear<Set::DAC12_::BaseAddress, Set::DAC12_::Mask, Clr::DAC12_::BaseAddress, Clr::DAC12_::Mask>;
using DCMI_ = RegisterDualSetClear<Set::DCMI_::BaseAddress, Set::DCMI_::Mask, Clr::DCMI_::BaseAddress, Clr::DCMI_::Mask>;
using DDRPERFM_ = RegisterDualSetClear<Set::DDRPERFM_::BaseAddress, Set::DDRPERFM_::Mask, Clr::DDRPERFM_::BaseAddress, Clr::DDRPERFM_::Mask>;
using DFSDM_ = RegisterDualSetClear<Set::DFSDM_::BaseAddress, Set::DFSDM_::Mask, Clr::DFSDM_::BaseAddress, Clr::DFSDM_::Mask>;
using DMA1_ = RegisterDualSetClear<Set::DMA1_::BaseAddress, Set::DMA1_::Mask, Clr::DMA1_::BaseAddress, Clr::DMA1_::Mask>;
using DMA2_ = RegisterDualSetClear<Set::DMA2_::BaseAddress, Set::DMA2_::Mask, Clr::DMA2_::BaseAddress, Clr::DMA2_::Mask>;
using DMAMUX_ = RegisterDualSetClear<Set::DMAMUX_::BaseAddress, Set::DMAMUX_::Mask, Clr::DMAMUX_::BaseAddress, Clr::DMAMUX_::Mask>;
using DSI_ = RegisterDualSetClear<Set::DSI_::BaseAddress, Set::DSI_::Mask, Clr::DSI_::BaseAddress, Clr::DSI_::Mask>;
using DTS_ = RegisterDualSetClear<Set::DTS_::BaseAddress, Set::DTS_::Mask, Clr::DTS_::BaseAddress, Clr::DTS_::Mask>;
using ETHMAC_ = RegisterDualSetClear<Set::ETHMAC_::BaseAddress, Set::ETHMAC_::Mask, Clr::ETHMAC_::BaseAddress, Clr::ETHMAC_::Mask>;
using FMC_ = RegisterDualSetClear<Set::FMC_::BaseAddress, Set::FMC_::Mask, Clr::FMC_::BaseAddress, Clr::FMC_::Mask>;
using GPIOA_ = RegisterDualSetClear<Set::GPIOA_::BaseAddress, Set::GPIOA_::Mask, Clr::GPIOA_::BaseAddress, Clr::GPIOA_::Mask>;
using GPIOB_ = RegisterDualSetClear<Set::GPIOB_::BaseAddress, Set::GPIOB_::Mask, Clr::GPIOB_::BaseAddress, Clr::GPIOB_::Mask>;
using GPIOC_ = RegisterDualSetClear<Set::GPIOC_::BaseAddress, Set::GPIOC_::Mask, Clr::GPIOC_::BaseAddress, Clr::GPIOC_::Mask>;
using GPIOD_ = RegisterDualSetClear<Set::GPIOD_::BaseAddress, Set::GPIOD_::Mask, Clr::GPIOD_::BaseAddress, Clr::GPIOD_::Mask>;
using GPIOE_ = RegisterDualSetClear<Set::GPIOE_::BaseAddress, Set::GPIOE_::Mask, Clr::GPIOE_::BaseAddress, Clr::GPIOE_::Mask>;
using GPIOF_ = RegisterDualSetClear<Set::GPIOF_::BaseAddress, Set::GPIOF_::Mask, Clr::GPIOF_::BaseAddress, Clr::GPIOF_::Mask>;
using GPIOG_ = RegisterDualSetClear<Set::GPIOG_::BaseAddress, Set::GPIOG_::Mask, Clr::GPIOG_::BaseAddress, Clr::GPIOG_::Mask>;
using GPIOH_ = RegisterDualSetClear<Set::GPIOH_::BaseAddress, Set::GPIOH_::Mask, Clr::GPIOH_::BaseAddress, Clr::GPIOH_::Mask>;
using GPIOI_ = RegisterDualSetClear<Set::GPIOI_::BaseAddress, Set::GPIOI_::Mask, Clr::GPIOI_::BaseAddress, Clr::GPIOI_::Mask>;
using GPIOJ_ = RegisterDualSetClear<Set::GPIOJ_::BaseAddress, Set::GPIOJ_::Mask, Clr::GPIOJ_::BaseAddress, Clr::GPIOJ_::Mask>;
using GPIOK_ = RegisterDualSetClear<Set::GPIOK_::BaseAddress, Set::GPIOK_::Mask, Clr::GPIOK_::BaseAddress, Clr::GPIOK_::Mask>;
using GPIOZ_ = RegisterDualSetClear<Set::GPIOZ_::BaseAddress, Set::GPIOZ_::Mask, Clr::GPIOZ_::BaseAddress, Clr::GPIOZ_::Mask>;
using HASH1_ = RegisterDualSetClear<Set::HASH1_::BaseAddress, Set::HASH1_::Mask, Clr::HASH1_::BaseAddress, Clr::HASH1_::Mask>;
using HASH2_ = RegisterDualSetClear<Set::HASH2_::BaseAddress, Set::HASH2_::Mask, Clr::HASH2_::BaseAddress, Clr::HASH2_::Mask>;
using HSEM_ = RegisterDualSetClear<Set::HSEM_::BaseAddress, Set::HSEM_::Mask, Clr::HSEM_::BaseAddress, Clr::HSEM_::Mask>;
using I2C1_ = RegisterDualSetClear<Set::I2C1_::BaseAddress, Set::I2C1_::Mask, Clr::I2C1_::BaseAddress, Clr::I2C1_::Mask>;
using I2C2_ = RegisterDualSetClear<Set::I2C2_::BaseAddress, Set::I2C2_::Mask, Clr::I2C2_::BaseAddress, Clr::I2C2_::Mask>;
using I2C3_ = RegisterDualSetClear<Set::I2C3_::BaseAddress, Set::I2C3_::Mask, Clr::I2C3_::BaseAddress, Clr::I2C3_::Mask>;
using I2C4_ = RegisterDualSetClear<Set::I2C4_::BaseAddress, Set::I2C4_::Mask, Clr::I2C4_::BaseAddress, Clr::I2C4_::Mask>;
using I2C5_ = RegisterDualSetClear<Set::I2C5_::BaseAddress, Set::I2C5_::Mask, Clr::I2C5_::BaseAddress, Clr::I2C5_::Mask>;
using I2C6_ = RegisterDualSetClear<Set::I2C6_::BaseAddress, Set::I2C6_::Mask, Clr::I2C6_::BaseAddress, Clr::I2C6_::Mask>;
using IPCC_ = RegisterDualSetClear<Set::IPCC_::BaseAddress, Set::IPCC_::Mask, Clr::IPCC_::BaseAddress, Clr::IPCC_::Mask>;
using LPTIM1_ = RegisterDualSetClear<Set::LPTIM1_::BaseAddress, Set::LPTIM1_::Mask, Clr::LPTIM1_::BaseAddress, Clr::LPTIM1_::Mask>;
using LPTIM2_ = RegisterDualSetClear<Set::LPTIM2_::BaseAddress, Set::LPTIM2_::Mask, Clr::LPTIM2_::BaseAddress, Clr::LPTIM2_::Mask>;
using LPTIM3_ = RegisterDualSetClear<Set::LPTIM3_::BaseAddress, Set::LPTIM3_::Mask, Clr::LPTIM3_::BaseAddress, Clr::LPTIM3_::Mask>;
using LPTIM4_ = RegisterDualSetClear<Set::LPTIM4_::BaseAddress, Set::LPTIM4_::Mask, Clr::LPTIM4_::BaseAddress, Clr::LPTIM4_::Mask>;
using LPTIM5_ = RegisterDualSetClear<Set::LPTIM5_::BaseAddress, Set::LPTIM5_::Mask, Clr::LPTIM5_::BaseAddress, Clr::LPTIM5_::Mask>;
using LTDC_ = RegisterDualSetClear<Set::LTDC_::BaseAddress, Set::LTDC_::Mask, Clr::LTDC_::BaseAddress, Clr::LTDC_::Mask>;
using MDIOS_ = RegisterDualSetClear<Set::MDIOS_::BaseAddress, Set::MDIOS_::Mask, Clr::MDIOS_::BaseAddress, Clr::MDIOS_::Mask>;
using MDMA_ = RegisterDualSetClear<Set::MDMA_::BaseAddress, Set::MDMA_::Mask, Clr::MDMA_::BaseAddress, Clr::MDMA_::Mask>;
using QSPI_ = RegisterDualSetClear<Set::QSPI_::BaseAddress, Set::QSPI_::Mask, Clr::QSPI_::BaseAddress, Clr::QSPI_::Mask>;
using RNG1_ = RegisterDualSetClear<Set::RNG1_::BaseAddress, Set::RNG1_::Mask, Clr::RNG1_::BaseAddress, Clr::RNG1_::Mask>;
using RNG2_ = RegisterDualSetClear<Set::RNG2_::BaseAddress, Set::RNG2_::Mask, Clr::RNG2_::BaseAddress, Clr::RNG2_::Mask>;
using SAI1_ = RegisterDualSetClear<Set::SAI1_::BaseAddress, Set::SAI1_::Mask, Clr::SAI1_::BaseAddress, Clr::SAI1_::Mask>;
using SAI2_ = RegisterDualSetClear<Set::SAI2_::BaseAddress, Set::SAI2_::Mask, Clr::SAI2_::BaseAddress, Clr::SAI2_::Mask>;
using SAI3_ = RegisterDualSetClear<Set::SAI3_::BaseAddress, Set::SAI3_::Mask, Clr::SAI3_::BaseAddress, Clr::SAI3_::Mask>;
using SAI4_ = RegisterDualSetClear<Set::SAI4_::BaseAddress, Set::SAI4_::Mask, Clr::SAI4_::BaseAddress, Clr::SAI4_::Mask>;
using SDMMC1_ = RegisterDualSetClear<Set::SDMMC1_::BaseAddress, Set::SDMMC1_::Mask, Clr::SDMMC1_::BaseAddress, Clr::SDMMC1_::Mask>;
using SDMMC2_ = RegisterDualSetClear<Set::SDMMC2_::BaseAddress, Set::SDMMC2_::Mask, Clr::SDMMC2_::BaseAddress, Clr::SDMMC2_::Mask>;
using SDMMC3_ = RegisterDualSetClear<Set::SDMMC3_::BaseAddress, Set::SDMMC3_::Mask, Clr::SDMMC3_::BaseAddress, Clr::SDMMC3_::Mask>;
using SPDIF_ = RegisterDualSetClear<Set::SPDIF_::BaseAddress, Set::SPDIF_::Mask, Clr::SPDIF_::BaseAddress, Clr::SPDIF_::Mask>;
using SPI1_ = RegisterDualSetClear<Set::SPI1_::BaseAddress, Set::SPI1_::Mask, Clr::SPI1_::BaseAddress, Clr::SPI1_::Mask>;
using SPI2_ = RegisterDualSetClear<Set::SPI2_::BaseAddress, Set::SPI2_::Mask, Clr::SPI2_::BaseAddress, Clr::SPI2_::Mask>;
using SPI3_ = RegisterDualSetClear<Set::SPI3_::BaseAddress, Set::SPI3_::Mask, Clr::SPI3_::BaseAddress, Clr::SPI3_::Mask>;
using SPI4_ = RegisterDualSetClear<Set::SPI4_::BaseAddress, Set::SPI4_::Mask, Clr::SPI4_::BaseAddress, Clr::SPI4_::Mask>;
using SPI5_ = RegisterDualSetClear<Set::SPI5_::BaseAddress, Set::SPI5_::Mask, Clr::SPI5_::BaseAddress, Clr::SPI5_::Mask>;
using SPI6_ = RegisterDualSetClear<Set::SPI6_::BaseAddress, Set::SPI6_::Mask, Clr::SPI6_::BaseAddress, Clr::SPI6_::Mask>;
using STGEN_ = RegisterDualSetClear<Set::STGEN_::BaseAddress, Set::STGEN_::Mask, Clr::STGEN_::BaseAddress, Clr::STGEN_::Mask>;
using SYSCFG_ = RegisterDualSetClear<Set::SYSCFG_::BaseAddress, Set::SYSCFG_::Mask, Clr::SYSCFG_::BaseAddress, Clr::SYSCFG_::Mask>;
using TIM1_ = RegisterDualSetClear<Set::TIM1_::BaseAddress, Set::TIM1_::Mask, Clr::TIM1_::BaseAddress, Clr::TIM1_::Mask>;
using TIM2_ = RegisterDualSetClear<Set::TIM2_::BaseAddress, Set::TIM2_::Mask, Clr::TIM2_::BaseAddress, Clr::TIM2_::Mask>;
using TIM3_ = RegisterDualSetClear<Set::TIM3_::BaseAddress, Set::TIM3_::Mask, Clr::TIM3_::BaseAddress, Clr::TIM3_::Mask>;
using TIM4_ = RegisterDualSetClear<Set::TIM4_::BaseAddress, Set::TIM4_::Mask, Clr::TIM4_::BaseAddress, Clr::TIM4_::Mask>;
using TIM5_ = RegisterDualSetClear<Set::TIM5_::BaseAddress, Set::TIM5_::Mask, Clr::TIM5_::BaseAddress, Clr::TIM5_::Mask>;
using TIM6_ = RegisterDualSetClear<Set::TIM6_::BaseAddress, Set::TIM6_::Mask, Clr::TIM6_::BaseAddress, Clr::TIM6_::Mask>;
using TIM7_ = RegisterDualSetClear<Set::TIM7_::BaseAddress, Set::TIM7_::Mask, Clr::TIM7_::BaseAddress, Clr::TIM7_::Mask>;
using TIM8_ = RegisterDualSetClear<Set::TIM8_::BaseAddress, Set::TIM8_::Mask, Clr::TIM8_::BaseAddress, Clr::TIM8_::Mask>;
using TIM12_ = RegisterDualSetClear<Set::TIM12_::BaseAddress, Set::TIM12_::Mask, Clr::TIM12_::BaseAddress, Clr::TIM12_::Mask>;
using TIM13_ = RegisterDualSetClear<Set::TIM13_::BaseAddress, Set::TIM13_::Mask, Clr::TIM13_::BaseAddress, Clr::TIM13_::Mask>;
using TIM14_ = RegisterDualSetClear<Set::TIM14_::BaseAddress, Set::TIM14_::Mask, Clr::TIM14_::BaseAddress, Clr::TIM14_::Mask>;
using TIM15_ = RegisterDualSetClear<Set::TIM15_::BaseAddress, Set::TIM15_::Mask, Clr::TIM15_::BaseAddress, Clr::TIM15_::Mask>;
using TIM16_ = RegisterDualSetClear<Set::TIM16_::BaseAddress, Set::TIM16_::Mask, Clr::TIM16_::BaseAddress, Clr::TIM16_::Mask>;
using TIM17_ = RegisterDualSetClear<Set::TIM17_::BaseAddress, Set::TIM17_::Mask, Clr::TIM17_::BaseAddress, Clr::TIM17_::Mask>;
using UART4_ = RegisterDualSetClear<Set::UART4_::BaseAddress, Set::UART4_::Mask, Clr::UART4_::BaseAddress, Clr::UART4_::Mask>;
using UART5_ = RegisterDualSetClear<Set::UART5_::BaseAddress, Set::UART5_::Mask, Clr::UART5_::BaseAddress, Clr::UART5_::Mask>;
using UART7_ = RegisterDualSetClear<Set::UART7_::BaseAddress, Set::UART7_::Mask, Clr::UART7_::BaseAddress, Clr::UART7_::Mask>;
using UART8_ = RegisterDualSetClear<Set::UART8_::BaseAddress, Set::UART8_::Mask, Clr::UART8_::BaseAddress, Clr::UART8_::Mask>;
using USART1_ = RegisterDualSetClear<Set::USART1_::BaseAddress, Set::USART1_::Mask, Clr::USART1_::BaseAddress, Clr::USART1_::Mask>;
using USART2_ = RegisterDualSetClear<Set::USART2_::BaseAddress, Set::USART2_::Mask, Clr::USART2_::BaseAddress, Clr::USART2_::Mask>;
using USART3_ = RegisterDualSetClear<Set::USART3_::BaseAddress, Set::USART3_::Mask, Clr::USART3_::BaseAddress, Clr::USART3_::Mask>;
using USART6_ = RegisterDualSetClear<Set::USART6_::BaseAddress, Set::USART6_::Mask, Clr::USART6_::BaseAddress, Clr::USART6_::Mask>;
using USBH_ = RegisterDualSetClear<Set::USBH_::BaseAddress, Set::USBH_::Mask, Clr::USBH_::BaseAddress, Clr::USBH_::Mask>;
using USBO_ = RegisterDualSetClear<Set::USBO_::BaseAddress, Set::USBO_::Mask, Clr::USBO_::BaseAddress, Clr::USBO_::Mask>;
using USBPHY_ = RegisterDualSetClear<Set::USBPHY_::BaseAddress, Set::USBPHY_::Mask, Clr::USBPHY_::BaseAddress, Clr::USBPHY_::Mask>;
using VREF_ = RegisterDualSetClear<Set::VREF_::BaseAddress, Set::VREF_::Mask, Clr::VREF_::BaseAddress, Clr::VREF_::Mask>;
// clang-format on
} // namespace RCC_Reset

namespace RCC_Clocks
{
/*
using CR = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, CR), 0xFFFFFFFF>;
using D1CKREADY = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, CR), RCC_CR_D1CKRDY>;
using D2CKREADY = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, CR), RCC_CR_D2CKRDY>;
*/
} // namespace RCC_Clocks

namespace core_m4::RCC_Enable
{
// clang-format off
using ADC12LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB2LPENSETR), RCC_MC_AHB2LPENSETR_ADC12LPEN>;
using ADC12_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB2ENSETR), RCC_MC_AHB2ENSETR_ADC12EN>;
using ADFSDMLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2LPENSETR), RCC_MC_APB2LPENSETR_ADFSDMLPEN>;
using ADFSDM_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2ENSETR), RCC_MC_APB2ENSETR_ADFSDMEN>;
using AXIMC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MP_AHB5ENSETR), RCC_MP_AHB5ENSETR_AXIMCEN>;
using BKPSRAMLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB5LPENSETR), RCC_MC_AHB5LPENSETR_BKPSRAMLPEN>;
using BKPSRAM_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB5ENSETR), RCC_MC_AHB5ENSETR_BKPSRAMEN>;
using BSECLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5LPENSETR), RCC_MC_APB5LPENSETR_BSECLPEN>;
using BSEC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5ENSETR), RCC_MC_APB5ENSETR_BSECEN>;
using CECLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_CECLPEN>;
using CEC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_CECEN>;
using CRC1LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6LPENSETR), RCC_MC_AHB6LPENSETR_CRC1LPEN>;
using CRC1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6ENSETR), RCC_MC_AHB6ENSETR_CRC1EN>;
using CRC2LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB3LPENSETR), RCC_MC_AHB3LPENSETR_CRC2LPEN>;
using CRC2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB3ENSETR), RCC_MC_AHB3ENSETR_CRC2EN>;
using CRYP1LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB5LPENSETR), RCC_MC_AHB5LPENSETR_CRYP1LPEN>;
using CRYP1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB5ENSETR), RCC_MC_AHB5ENSETR_CRYP1EN>;
using CRYP2LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB3LPENSETR), RCC_MC_AHB3LPENSETR_CRYP2LPEN>;
using CRYP2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB3ENSETR), RCC_MC_AHB3ENSETR_CRYP2EN>;
using DAC12LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_DAC12LPEN>;
using DAC12_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_DAC12EN>;
using DCMILP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB3LPENSETR), RCC_MC_AHB3LPENSETR_DCMILPEN>;
using DCMI_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB3ENSETR), RCC_MC_AHB3ENSETR_DCMIEN>;
using DDRPERFMLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB4LPENSETR), RCC_MC_APB4LPENSETR_DDRPERFMLPEN>;
using DDRPERFM_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB4ENSETR), RCC_MC_APB4ENSETR_DDRPERFMEN>;
using DFSDMLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2LPENSETR), RCC_MC_APB2LPENSETR_DFSDMLPEN>;
using DFSDM_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2ENSETR), RCC_MC_APB2ENSETR_DFSDMEN>;
using DMA1LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB2LPENSETR), RCC_MC_AHB2LPENSETR_DMA1LPEN>;
using DMA1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB2ENSETR), RCC_MC_AHB2ENSETR_DMA1EN>;
using DMA2LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB2LPENSETR), RCC_MC_AHB2LPENSETR_DMA2LPEN>;
using DMA2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB2ENSETR), RCC_MC_AHB2ENSETR_DMA2EN>;
using DMAMUXLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB2LPENSETR), RCC_MC_AHB2LPENSETR_DMAMUXLPEN>;
using DMAMUX_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB2ENSETR), RCC_MC_AHB2ENSETR_DMAMUXEN>;
using DSILP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB4LPENSETR), RCC_MC_APB4LPENSETR_DSILPEN>;
using DSI_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB4ENSETR), RCC_MC_APB4ENSETR_DSIEN>;
using DTSLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB3LPENSETR), RCC_MC_APB3LPENSETR_DTSLPEN>;
using DTS_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB3ENSETR), RCC_MC_APB3ENSETR_DTSEN>;
using ETHCKLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6LPENSETR), RCC_MC_AHB6LPENSETR_ETHCKLPEN>;
using ETHCK_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6ENSETR), RCC_MC_AHB6ENSETR_ETHCKEN>;
using ETHMACLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6LPENSETR), RCC_MC_AHB6LPENSETR_ETHMACLPEN>;
using ETHMAC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6ENSETR), RCC_MC_AHB6ENSETR_ETHMACEN>;
using ETHRXLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6LPENSETR), RCC_MC_AHB6LPENSETR_ETHRXLPEN>;
using ETHRX_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6ENSETR), RCC_MC_AHB6ENSETR_ETHRXEN>;
using ETHSTP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6LPENSETR), RCC_MC_AHB6LPENSETR_ETHSTPEN>;
using ETHTXLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6LPENSETR), RCC_MC_AHB6LPENSETR_ETHTXLPEN>;
using ETHTX_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6ENSETR), RCC_MC_AHB6ENSETR_ETHTXEN>;
using FDCANLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2LPENSETR), RCC_MC_APB2LPENSETR_FDCANLPEN>;
using FDCAN_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2ENSETR), RCC_MC_APB2ENSETR_FDCANEN>;
using FMCLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6LPENSETR), RCC_MC_AHB6LPENSETR_FMCLPEN>;
using FMC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6ENSETR), RCC_MC_AHB6ENSETR_FMCEN>;
using GPIOALP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4LPENSETR), RCC_MC_AHB4LPENSETR_GPIOALPEN>;
using GPIOA_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4ENSETR), RCC_MC_AHB4ENSETR_GPIOAEN>;
using GPIOBLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4LPENSETR), RCC_MC_AHB4LPENSETR_GPIOBLPEN>;
using GPIOB_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4ENSETR), RCC_MC_AHB4ENSETR_GPIOBEN>;
using GPIOCLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4LPENSETR), RCC_MC_AHB4LPENSETR_GPIOCLPEN>;
using GPIOC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4ENSETR), RCC_MC_AHB4ENSETR_GPIOCEN>;
using GPIODLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4LPENSETR), RCC_MC_AHB4LPENSETR_GPIODLPEN>;
using GPIOD_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4ENSETR), RCC_MC_AHB4ENSETR_GPIODEN>;
using GPIOELP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4LPENSETR), RCC_MC_AHB4LPENSETR_GPIOELPEN>;
using GPIOE_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4ENSETR), RCC_MC_AHB4ENSETR_GPIOEEN>;
using GPIOFLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4LPENSETR), RCC_MC_AHB4LPENSETR_GPIOFLPEN>;
using GPIOF_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4ENSETR), RCC_MC_AHB4ENSETR_GPIOFEN>;
using GPIOGLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4LPENSETR), RCC_MC_AHB4LPENSETR_GPIOGLPEN>;
using GPIOG_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4ENSETR), RCC_MC_AHB4ENSETR_GPIOGEN>;
using GPIOHLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4LPENSETR), RCC_MC_AHB4LPENSETR_GPIOHLPEN>;
using GPIOH_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4ENSETR), RCC_MC_AHB4ENSETR_GPIOHEN>;
using GPIOILP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4LPENSETR), RCC_MC_AHB4LPENSETR_GPIOILPEN>;
using GPIOI_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4ENSETR), RCC_MC_AHB4ENSETR_GPIOIEN>;
using GPIOJLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4LPENSETR), RCC_MC_AHB4LPENSETR_GPIOJLPEN>;
using GPIOJ_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4ENSETR), RCC_MC_AHB4ENSETR_GPIOJEN>;
using GPIOKLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4LPENSETR), RCC_MC_AHB4LPENSETR_GPIOKLPEN>;
using GPIOK_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB4ENSETR), RCC_MC_AHB4ENSETR_GPIOKEN>;
using GPIOZLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB5LPENSETR), RCC_MC_AHB5LPENSETR_GPIOZLPEN>;
using GPIOZ_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB5ENSETR), RCC_MC_AHB5ENSETR_GPIOZEN>;
using GPULP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6LPENSETR), RCC_MC_AHB6LPENSETR_GPULPEN>;
using GPU_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6ENSETR), RCC_MC_AHB6ENSETR_GPUEN>;
using HASH1LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB5LPENSETR), RCC_MC_AHB5LPENSETR_HASH1LPEN>;
using HASH1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB5ENSETR), RCC_MC_AHB5ENSETR_HASH1EN>;
using HASH2LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB3LPENSETR), RCC_MC_AHB3LPENSETR_HASH2LPEN>;
using HASH2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB3ENSETR), RCC_MC_AHB3ENSETR_HASH2EN>;
using HDP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB3ENSETR), RCC_MC_APB3ENSETR_HDPEN>;
using HSEMLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB3LPENSETR), RCC_MC_AHB3LPENSETR_HSEMLPEN>;
using HSEM_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB3ENSETR), RCC_MC_AHB3ENSETR_HSEMEN>;
using I2C1LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_I2C1LPEN>;
using I2C1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_I2C1EN>;
using I2C2LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_I2C2LPEN>;
using I2C2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_I2C2EN>;
using I2C3LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_I2C3LPEN>;
using I2C3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_I2C3EN>;
using I2C4LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5LPENSETR), RCC_MC_APB5LPENSETR_I2C4LPEN>;
using I2C4_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5ENSETR), RCC_MC_APB5ENSETR_I2C4EN>;
using I2C5LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_I2C5LPEN>;
using I2C5_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_I2C5EN>;
using I2C6LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5LPENSETR), RCC_MC_APB5LPENSETR_I2C6LPEN>;
using I2C6_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5ENSETR), RCC_MC_APB5ENSETR_I2C6EN>;
using IPCCLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB3LPENSETR), RCC_MC_AHB3LPENSETR_IPCCLPEN>;
using IPCC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB3ENSETR), RCC_MC_AHB3ENSETR_IPCCEN>;
using LPTIM1LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_LPTIM1LPEN>;
using LPTIM1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_LPTIM1EN>;
using LPTIM2LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB3LPENSETR), RCC_MC_APB3LPENSETR_LPTIM2LPEN>;
using LPTIM2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB3ENSETR), RCC_MC_APB3ENSETR_LPTIM2EN>;
using LPTIM3LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB3LPENSETR), RCC_MC_APB3LPENSETR_LPTIM3LPEN>;
using LPTIM3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB3ENSETR), RCC_MC_APB3ENSETR_LPTIM3EN>;
using LPTIM4LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB3LPENSETR), RCC_MC_APB3LPENSETR_LPTIM4LPEN>;
using LPTIM4_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB3ENSETR), RCC_MC_APB3ENSETR_LPTIM4EN>;
using LPTIM5LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB3LPENSETR), RCC_MC_APB3LPENSETR_LPTIM5LPEN>;
using LPTIM5_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB3ENSETR), RCC_MC_APB3ENSETR_LPTIM5EN>;
using LTDCLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB4LPENSETR), RCC_MC_APB4LPENSETR_LTDCLPEN>;
using LTDC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB4ENSETR), RCC_MC_APB4ENSETR_LTDCEN>;
using MDIOSLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_MDIOSLPEN>;
using MDIOS_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_MDIOSEN>;
using MDMALP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6LPENSETR), RCC_MC_AHB6LPENSETR_MDMALPEN>;
using MDMA_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6ENSETR), RCC_MC_AHB6ENSETR_MDMAEN>;
using QSPILP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6LPENSETR), RCC_MC_AHB6LPENSETR_QSPILPEN>;
using QSPI_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6ENSETR), RCC_MC_AHB6ENSETR_QSPIEN>;
using RETRAMLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_MLAHBLPENSETR), RCC_MC_MLAHBLPENSETR_RETRAMLPEN>;
using RETRAM_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_MLAHBENSETR), RCC_MC_MLAHBENSETR_RETRAMEN>;
using RNG1LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB5LPENSETR), RCC_MC_AHB5LPENSETR_RNG1LPEN>;
using RNG1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB5ENSETR), RCC_MC_AHB5ENSETR_RNG1EN>;
using RNG2LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB3LPENSETR), RCC_MC_AHB3LPENSETR_RNG2LPEN>;
using RNG2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB3ENSETR), RCC_MC_AHB3ENSETR_RNG2EN>;
using RTCAPBLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5LPENSETR), RCC_MC_APB5LPENSETR_RTCAPBLPEN>;
using RTCAPB_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5ENSETR), RCC_MC_APB5ENSETR_RTCAPBEN>;
using SAI1LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2LPENSETR), RCC_MC_APB2LPENSETR_SAI1LPEN>;
using SAI1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2ENSETR), RCC_MC_APB2ENSETR_SAI1EN>;
using SAI2LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2LPENSETR), RCC_MC_APB2LPENSETR_SAI2LPEN>;
using SAI2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2ENSETR), RCC_MC_APB2ENSETR_SAI2EN>;
using SAI3LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2LPENSETR), RCC_MC_APB2LPENSETR_SAI3LPEN>;
using SAI3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2ENSETR), RCC_MC_APB2ENSETR_SAI3EN>;
using SAI4LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB3LPENSETR), RCC_MC_APB3LPENSETR_SAI4LPEN>;
using SAI4_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB3ENSETR), RCC_MC_APB3ENSETR_SAI4EN>;
using SDMMC1LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6LPENSETR), RCC_MC_AHB6LPENSETR_SDMMC1LPEN>;
using SDMMC1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6ENSETR), RCC_MC_AHB6ENSETR_SDMMC1EN>;
using SDMMC2LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6LPENSETR), RCC_MC_AHB6LPENSETR_SDMMC2LPEN>;
using SDMMC2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6ENSETR), RCC_MC_AHB6ENSETR_SDMMC2EN>;
using SDMMC3LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB2LPENSETR), RCC_MC_AHB2LPENSETR_SDMMC3LPEN>;
using SDMMC3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB2ENSETR), RCC_MC_AHB2ENSETR_SDMMC3EN>;
using SPDIFLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_SPDIFLPEN>;
using SPDIF_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_SPDIFEN>;
using SPI1LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2LPENSETR), RCC_MC_APB2LPENSETR_SPI1LPEN>;
using SPI1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2ENSETR), RCC_MC_APB2ENSETR_SPI1EN>;
using SPI2LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_SPI2LPEN>;
using SPI2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_SPI2EN>;
using SPI3LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_SPI3LPEN>;
using SPI3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_SPI3EN>;
using SPI4LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2LPENSETR), RCC_MC_APB2LPENSETR_SPI4LPEN>;
using SPI4_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2ENSETR), RCC_MC_APB2ENSETR_SPI4EN>;
using SPI5LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2LPENSETR), RCC_MC_APB2LPENSETR_SPI5LPEN>;
using SPI5_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2ENSETR), RCC_MC_APB2ENSETR_SPI5EN>;
using SPI6LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5LPENSETR), RCC_MC_APB5LPENSETR_SPI6LPEN>;
using SPI6_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5ENSETR), RCC_MC_APB5ENSETR_SPI6EN>;
using SRAM1LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_MLAHBLPENSETR), RCC_MC_MLAHBLPENSETR_SRAM1LPEN>;
using SRAM2LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_MLAHBLPENSETR), RCC_MC_MLAHBLPENSETR_SRAM2LPEN>;
using SRAM34LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_MLAHBLPENSETR), RCC_MC_MLAHBLPENSETR_SRAM34LPEN>;
using STGENLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5LPENSETR), RCC_MC_APB5LPENSETR_STGENLPEN>;
using STGENROLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB4LPENSETR), RCC_MC_APB4LPENSETR_STGENROLPEN>;
using STGENROSTP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB4LPENSETR), RCC_MC_APB4LPENSETR_STGENROSTPEN>;
using STGENRO_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB4ENSETR), RCC_MC_APB4ENSETR_STGENROEN>;
using STGENSTP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5LPENSETR), RCC_MC_APB5LPENSETR_STGENSTPEN>;
using STGEN_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5ENSETR), RCC_MC_APB5ENSETR_STGENEN>;
using SYSCFGLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB3LPENSETR), RCC_MC_APB3LPENSETR_SYSCFGLPEN>;
using SYSCFG_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB3ENSETR), RCC_MC_APB3ENSETR_SYSCFGEN>;
using SYSRAMLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AXIMLPENSETR), RCC_MC_AXIMLPENSETR_SYSRAMLPEN>;
using SYSRAM_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AXIMENSETR), RCC_MC_AXIMENSETR_SYSRAMEN>;
using TIM12LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_TIM12LPEN>;
using TIM12_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_TIM12EN>;
using TIM13LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_TIM13LPEN>;
using TIM13_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_TIM13EN>;
using TIM14LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_TIM14LPEN>;
using TIM14_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_TIM14EN>;
using TIM15LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2LPENSETR), RCC_MC_APB2LPENSETR_TIM15LPEN>;
using TIM15_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2ENSETR), RCC_MC_APB2ENSETR_TIM15EN>;
using TIM16LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2LPENSETR), RCC_MC_APB2LPENSETR_TIM16LPEN>;
using TIM16_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2ENSETR), RCC_MC_APB2ENSETR_TIM16EN>;
using TIM17LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2LPENSETR), RCC_MC_APB2LPENSETR_TIM17LPEN>;
using TIM17_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2ENSETR), RCC_MC_APB2ENSETR_TIM17EN>;
using TIM1LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2LPENSETR), RCC_MC_APB2LPENSETR_TIM1LPEN>;
using TIM1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2ENSETR), RCC_MC_APB2ENSETR_TIM1EN>;
using TIM2LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_TIM2LPEN>;
using TIM2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_TIM2EN>;
using TIM3LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_TIM3LPEN>;
using TIM3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_TIM3EN>;
using TIM4LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_TIM4LPEN>;
using TIM4_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_TIM4EN>;
using TIM5LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_TIM5LPEN>;
using TIM5_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_TIM5EN>;
using TIM6LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_TIM6LPEN>;
using TIM6_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_TIM6EN>;
using TIM7LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_TIM7LPEN>;
using TIM7_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_TIM7EN>;
using TIM8LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2LPENSETR), RCC_MC_APB2LPENSETR_TIM8LPEN>;
using TIM8_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2ENSETR), RCC_MC_APB2ENSETR_TIM8EN>;
using TZC1LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5LPENSETR), RCC_MC_APB5LPENSETR_TZC1LPEN>;
using TZC1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5ENSETR), RCC_MC_APB5ENSETR_TZC1EN>;
using TZC2LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5LPENSETR), RCC_MC_APB5LPENSETR_TZC2LPEN>;
using TZC2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5ENSETR), RCC_MC_APB5ENSETR_TZC2EN>;
using TZPCLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5LPENSETR), RCC_MC_APB5LPENSETR_TZPCLPEN>;
using TZPC_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5ENSETR), RCC_MC_APB5ENSETR_TZPCEN>;
using UART4LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_UART4LPEN>;
using UART4_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_UART4EN>;
using UART5LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_UART5LPEN>;
using UART5_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_UART5EN>;
using UART7LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_UART7LPEN>;
using UART7_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_UART7EN>;
using UART8LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_UART8LPEN>;
using UART8_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_UART8EN>;
using USART1LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5LPENSETR), RCC_MC_APB5LPENSETR_USART1LPEN>;
using USART1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB5ENSETR), RCC_MC_APB5ENSETR_USART1EN>;
using USART2LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_USART2LPEN>;
using USART2_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_USART2EN>;
using USART3LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_USART3LPEN>;
using USART3_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_USART3EN>;
using USART6LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2LPENSETR), RCC_MC_APB2LPENSETR_USART6LPEN>;
using USART6_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB2ENSETR), RCC_MC_APB2ENSETR_USART6EN>;
using USBHLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6LPENSETR), RCC_MC_AHB6LPENSETR_USBHLPEN>;
using USBH_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB6ENSETR), RCC_MC_AHB6ENSETR_USBHEN>;
using USBOLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB2LPENSETR), RCC_MC_AHB2LPENSETR_USBOLPEN>;
using USBO_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_AHB2ENSETR), RCC_MC_AHB2ENSETR_USBOEN>;
using USBPHYLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB4LPENSETR), RCC_MC_APB4LPENSETR_USBPHYLPEN>;
using USBPHY_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB4ENSETR), RCC_MC_APB4ENSETR_USBPHYEN>;
using VREFLP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB3LPENSETR), RCC_MC_APB3LPENSETR_VREFLPEN>;
using VREF_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB3ENSETR), RCC_MC_APB3ENSETR_VREFEN>;
using WWDG1LP_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1LPENSETR), RCC_MC_APB1LPENSETR_WWDG1LPEN>;
using WWDG1_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MC_APB1ENSETR), RCC_MC_APB1ENSETR_WWDG1EN>;
// clang-format on
} // namespace core_m4::RCC_Enable

namespace core_a7::RCC_Enable_Release {
    using IWDG2APB_ = RegisterBits<ReadWrite, RCC_BASE + offsetof(RCC_TypeDef, MP_APB4ENCLRR), RCC_MP_APB4ENCLRR_IWDG2APBEN>;
} // namespace core_a7::RCC_Enable_Release
} // namespace mdrivlib
