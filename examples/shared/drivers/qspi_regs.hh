#pragma once
#include "register_access.hh"
#include "stm32mp1xx.h"

namespace mdrivlib::QSPI
{
// clang-format off
// Auto-generated by:
// :s/\v#define QUADSPI_([^_]{-})_([^_]{-}) /using \2 = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, \1), QUADSPI_\1_\2>;\r\0

// TODO: better names!

using EN = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CR), QUADSPI_CR_EN>;
using ABORT = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CR), QUADSPI_CR_ABORT>;
using DMAEN = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CR), QUADSPI_CR_DMAEN>;
using TCEN = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CR), QUADSPI_CR_TCEN>;
using SSHIFT = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CR), QUADSPI_CR_SSHIFT>;
using DFM = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CR), QUADSPI_CR_DFM>;
using FSEL = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CR), QUADSPI_CR_FSEL>;
using FTHRES = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CR), QUADSPI_CR_FTHRES>;
using TEIE = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CR), QUADSPI_CR_TEIE>;
using TCIE = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CR), QUADSPI_CR_TCIE>;
using FTIE = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CR), QUADSPI_CR_FTIE>;
using SMIE = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CR), QUADSPI_CR_SMIE>;
using TOIE = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CR), QUADSPI_CR_TOIE>;
using APMS = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CR), QUADSPI_CR_APMS>;
using PMM = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CR), QUADSPI_CR_PMM>;
using PRESCALER = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CR), QUADSPI_CR_PRESCALER>;

using CKMODE = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, DCR), QUADSPI_DCR_CKMODE>;
using CSHT = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, DCR), QUADSPI_DCR_CSHT>;
using FSIZE = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, DCR), QUADSPI_DCR_FSIZE>;

using TEF = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, SR), QUADSPI_SR_TEF>;
using TCF = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, SR), QUADSPI_SR_TCF>;
using FTF = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, SR), QUADSPI_SR_FTF>;
using SMF = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, SR), QUADSPI_SR_SMF>;
using TOF = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, SR), QUADSPI_SR_TOF>;
using BUSY = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, SR), QUADSPI_SR_BUSY>;
using FLEVEL = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, SR), QUADSPI_SR_FLEVEL>;

using CTEF = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, FCR), QUADSPI_FCR_CTEF>;
using CTCF = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, FCR), QUADSPI_FCR_CTCF>;
using CSMF = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, FCR), QUADSPI_FCR_CSMF>;
using CTOF = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, FCR), QUADSPI_FCR_CTOF>;

using DL = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, DLR), QUADSPI_DLR_DL>;

using INSTRUCTION = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CCR), QUADSPI_CCR_INSTRUCTION>;
using IMODE = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CCR), QUADSPI_CCR_IMODE>;
using ADMODE = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CCR), QUADSPI_CCR_ADMODE>;
using ADSIZE = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CCR), QUADSPI_CCR_ADSIZE>;
using ABMODE = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CCR), QUADSPI_CCR_ABMODE>;
using ABSIZE = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CCR), QUADSPI_CCR_ABSIZE>;
using DCYC = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CCR), QUADSPI_CCR_DCYC>;
using DMODE = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CCR), QUADSPI_CCR_DMODE>;
using FMODE = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CCR), QUADSPI_CCR_FMODE>;
using SIOO = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CCR), QUADSPI_CCR_SIOO>;
using DHHC = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CCR), QUADSPI_CCR_DHHC>;
using DDRM = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, CCR), QUADSPI_CCR_DDRM>;

using ADDRESS = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, AR), QUADSPI_AR_ADDRESS>;

using ALTERNATE = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, ABR), QUADSPI_ABR_ALTERNATE>;

using DATA = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, DR), QUADSPI_DR_DATA>;

using MASK = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, PSMKR), QUADSPI_PSMKR_MASK>;

using MATCH = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, PSMAR), QUADSPI_PSMAR_MATCH>;

using INTERVAL = RegisterBits<ReadWrite, QSPI_R_BASE + offsetof(QUADSPI_TypeDef, PIR), QUADSPI_PIR_INTERVAL>;

// clang-format on
} // namespace mdrivlib::QSPI
